export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
}, Record<string, any>, never>;
export declare const reportDiagnostic: <C extends "invalid-extension-key" | "duplicate-type-name", M extends keyof {
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
}, C, M>) => void, createStateSymbol: (name: string) => symbol;
//# sourceMappingURL=lib.d.ts.map